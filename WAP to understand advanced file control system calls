#include<stdio.h>

#include<unistd.h>

#include<sys/types.h>

#include<sys/stat.h>

#include<fcntl.h>



int main(int argc,char *argv[])

{

	int fd;

	struct flock lock;	

	char buff_1[]="Parent process got lock\n";

	char buff_2[]="Child process got lock\n";

	pid_t child_pid;



	/* check for file passed as command line argument */

	if(argc==1)

	{

		printf("INFO : Please Provide file name as command line argument!\n");

		return 1;

	}



	fd=open(argv[1],O_WRONLY|O_CREAT,0666);

		/* initiate duplication */

	child_pid=fork();



	/* child process */

	if(child_pid == 0)

	{

		/* open file */



		/* check for failure in opening of file */

		if(fd==-1)

		{

			printf("FILE : %s\n",argv[1]);

			perror("File open");

			return 1;

		}

		



		/* set lock parameters */

		lock.l_type=F_WRLCK;

		lock.l_whence=SEEK_SET;

		lock.l_start=0;

		lock.l_len=0;



		if(fcntl(fd,F_GETLK,&lock)==-1)

			perror("fcntl");

		



//		printf("lock type %d\n",lock.l_type);

		/* check if lock already set */

		if(lock.l_type==F_UNLCK)

		{

			printf("child process:locked file\n");

			/* set lock */

			lock.l_type=F_WRLCK;



			if(fcntl(fd,F_SETLK,&lock)==-1)

			{

				perror("lock");

				close(fd);

				return 1;

			}

			else

				printf("child process:locked file\n");

		}

		/* lock not set */

		else

		{

			/* set lock */

			lock.l_type=F_WRLCK;

			if(fcntl(fd,F_SETLKW,&lock)==-1)

			{

				perror("lock");

				close(fd);

				return 1;

			}

			else

				printf("child process: locked file\n");

		}



		/* write into file */

		if(write(fd,buff_2,sizeof(buff_2)-1)==-1)

		{

			printf("FILE : %s\n",argv[1]);

			perror("File write");

			return 1;

		}

		else

			printf("child process:writing to file f1.txt\n");

		

//		sleep(5);

		/* reset lock to unclock mode */

		lock.l_type=F_UNLCK;



		/* set unlock */

		if(fcntl(fd,F_SETLK,&lock)==-1)

			perror("fcntl");

		else

			printf("child process:unlocked file\n");



	return 0;

	}



	/* parent process */

	else if(child_pid>0)

	{

		/* check for failure in opening file */

//		sleep(2);

		if(fd==-1)

		{

			printf("FILE : %s\n",argv[1]);

			perror("File open");

			return 1;

		}

		

		lock.l_type=F_WRLCK;

		lock.l_whence=SEEK_SET;

		lock.l_start=0;

		lock.l_len=sizeof(buff_1)-1;



		/* set lock on file */

		if(fcntl(fd,F_SETLK,&lock)==-1)

			perror("fcntl");

		else

			printf("parent process:locked file\n");



		/* write into file */

		if(write(fd,buff_1,sizeof(buff_1)-1)==-1)

		{

			printf("FILE : %s\n",argv[1]);

			perror("File write");

			return 1;

		}

		else

			printf("parent process:writing to file f1.txt\n");

			

		sleep(5);



		/* reset lock to unclock mode */

		lock.l_type=F_UNLCK;



		/* set unlock */

		if(fcntl(fd,F_SETLK,&lock)==-1)

			perror("fcntl");

		else

			printf("parent process:unlocked file\n");

		return 0;

	}



	else

	{

		perror("fork");

		return 1;

	}

}
